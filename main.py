import os
from dotenv import load_dotenv
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
from langchain_openai import ChatOpenAI
from hybrid_retriever import HybridRetriever, faiss_retriever, bm25_retriever

# === 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("OPENAI_API_KEY is required")

# === 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM ===
llm = ChatOpenAI(
    api_key=api_key,
    model="gpt-4o-mini",
    temperature=0.7,
    max_tokens=1000
)

# === 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞ ===
hybrid_retriever = HybridRetriever(faiss_retriever, bm25_retriever)

# === 4. –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
query = input("\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å: ")

# === 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ===
relevant_docs = hybrid_retriever.get_relevant_documents(query)

# === 6. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===
context = "\n".join(
    f"–í–æ–ø—Ä–æ—Å: {doc.page_content}\n–û—Ç–≤–µ—Ç: {doc.metadata['answer']}"
    for doc in relevant_docs
)

# === 7. –ü—Ä–æ–º–ø—Ç –¥–ª—è LLM ===
prompt_template = """
–¢—ã –æ–Ω–ª–∞–π–Ω –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –ú–¢–°.
–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –≤–µ–∂–ª–∏–≤–æ –∏ –ª—é–±–µ–∑–Ω–æ –æ—Ç–≤–µ—á–∞—è –Ω–∞ –∏—Ö –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏.
–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

{context}

–í–æ–ø—Ä–æ—Å: {query}
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –ø–æ–ª–Ω—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ –ú–¢–°.

–ï—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ "https://support.mts.ru/contacts".
–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –ø—Ä–æ–¥—É–∫—Ç–∞–º –ú–¢–° ‚Äî –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ —Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å —Ç–æ–ª—å–∫–æ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –≤–Ω—É—Ç—Ä–∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã –ú–¢–°.
–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –≤–µ–∂–ª–∏–≤—ã–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""

prompt = PromptTemplate(
    input_variables=["context", "query"],
    template=prompt_template
)

# === 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ===
llm_chain = LLMChain(llm=llm, prompt=prompt)
answer = llm_chain.run({"context": context, "query": query})

# === 9. –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ===
print("\n=================\n‚úÖ –û—Ç–≤–µ—Ç:")
print(answer.strip())

print("\nüîç –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
for doc in relevant_docs:
    print(f"\n- –í–æ–ø—Ä–æ—Å: {doc.page_content}\n  –û—Ç–≤–µ—Ç: {doc.metadata['answer']}\n  –°—Å—ã–ª–∫–∞: {doc.metadata['file_path']}")